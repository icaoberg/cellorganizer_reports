execfile( 'bitbucket_connect.py' )
execfile( 'slack_connect.py' )

import os
print

import datetime

from tabulate import tabulate

from pyfiglet import Figlet
fig = Figlet(font='bubble')

[success, issues] = bb.issue.all()
number_of_issues = issues['count']

ofile = open('report.txt', 'w')
ofile.write( fig.renderText('CellOrganizer') )
ofile.write( '\n\nThis is an automatic report generated by ' + os.environ['USER'] +  \
	' on ' + datetime.datetime.now().strftime('%d-%b-%Y %H-%M-%S') + '\n\n')

table = []
headers = ["key", "value"]

ofile.write( 'Repository infomation\n' )
[anwser, repo ] = bb.repository.get( slug )

keys = ["name", "language", "slug", "size_in_bytes", "utc_last_updated" ]

for key in keys:
	if repo.has_key( key ):
		datum = [ key, repo[key] ]
		table.append( datum )

ofile.write( tabulate(table, headers, tablefmt="grid") )

open_tickets_table = []
resolved_tickets_table = []

headers = ["id", 'ver', 'kind', 'title', 'responsible', 'url']
counts = {}
counts['new'] = 0
counts['open'] = 0

for issue_number in range( number_of_issues, 1, -1  ):
	print 'Getting issue: ' + str(issue_number)
	[answer, issue] = bb.issue.get( issue_number )

	if issue['status'] == 'open' or issue['status'] == 'new':
		if issue['status'] == 'open':
			counts['open'] = counts['open'] + 1
		else:
			counts['new'] = counts['new'] + 1

		if issue.has_key( 'title' ):
			title = issue['title']
		else:
			title = 'unknown'

		kind = issue['metadata']['kind']

		if issue.has_key( 'responsible' ):
			responsible = issue['responsible']['username']
		else:
			responsible = 'unknown'

		version = issue['metadata']['version']
		if not version:
			version = 'unknown'

		url = 'https://bitbucket.org/icaoberg/cellorganizer/issue/' + str(issue_number)

		if kind == 'bug' or kind == 'task':
			datum = [issue_number, version, kind, title, responsible, url]
			open_tickets_table.append( datum  )

	if issue['status'] == 'resolved':
		if issue['status'] == 'open':
			counts['open'] = counts['open'] + 1
		else:
			counts['new'] = counts['new'] + 1

		if issue.has_key( 'title' ):
			title = issue['title']
		else:
			title = 'unknown'

		kind = issue['metadata']['kind']

		if issue.has_key( 'responsible' ):
			responsible = issue['responsible']['username']
		else:
			responsible = 'unknown'

		version = issue['metadata']['version']
		if not version:
			version = 'unknown'

		url = 'https://bitbucket.org/icaoberg/cellorganizer/issue/' + str(issue_number)

		if kind == 'bug' or kind == 'task':
			if version == '2.4' or version == '2.5':
				datum = [issue_number, version, kind, title, responsible, url]
				resolved_tickets_table.append( datum  )

ofile.write( '\n\nList of Open/New issues\n' )
ofile.write( tabulate(open_tickets_table, headers, tablefmt="grid") )

ofile.write( '\n\nList of Resolved issues\n' )
ofile.write( tabulate(resolved_tickets_table, headers, tablefmt="grid") )
ofile.close()
